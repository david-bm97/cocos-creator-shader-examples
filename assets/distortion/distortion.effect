// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        renderTexture: { value: grey }
        noiseIntensity: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
  #include <cc-global>

  in vec4 color;

  uniform sampler2D renderTexture;

  uniform Constants {
      float noiseIntensity;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif

    float Noise21 (vec2 p, float ta, float tb) {
        return fract(sin(p.x*ta+p.y*tb)*5678.);
    }

    vec4 applyNoise(vec2 uv) {
        float t = cc_time.x + 123.0;
        float ta = t*.654321;
        float tb = t*(ta*.123456);
        float c = Noise21(uv, ta, tb);
        return vec4(c);
    }

    vec4 addStripes(vec2 uv, vec4 col) {
        if (uv.x > 0.0 && uv.x < 1.0 && uv.y > 0.0 && uv.y < 1.0) {
            float stripesIntensity = 2.0;
            float stripesSize = 300.0;
            float stripesSpeed = 10.0;
            float stripes = sin(uv.y * stripesSize + cc_time.x * stripesSpeed);
            return mix(col, vec4(stripesIntensity), stripes / 20.0);
        }
        return col;
    }

  vec4 frag () {
    // Uv
    vec2 uv = gl_FragCoord.xy / cc_screenSize.xy;
    // Noise
    vec4 noise = applyNoise(uv);
    // Render texture
    vec4 renderTex = texture2D(renderTexture, uv);
    // Merge render texture & noise
    vec4 col = mix (noise.xyzw, renderTex.xyzw, noiseIntensity);
    // Stripes
    col = addStripes(uv, col);
    // Output color
    ALPHA_TEST(col);
    return col;
  }
}%
